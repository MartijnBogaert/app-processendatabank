(in-package :mu-cl-resources)

(setf *include-count-in-paginated-responses* t)
(setf *supply-cache-headers-p* t)
(setf sparql:*experimental-no-application-graph-for-sudo-select-queries* t)
(setf *cache-model-properties-p* t)

;;;;
;; NOTE
;; docker-compose stop; docker-compose rm; docker-compose up
;; after altering this file.

;; BPMN Based Ontology (BBO) (See https://www.irit.fr/recherches/MELODI/ontologies/BBO)

(define-resource thing ()
  :properties `((:name :string ,(s-prefix "bbo:name"))
                (:created-on :string ,(s-prefix "bbo:createdOn"))
                (:max-value :string ,(s-prefix "bbo:maxValue"))
                (:id :string ,(s-prefix "bbo:id"))
                (:value :string ,(s-prefix "bbo:value"))
                (:min-value :string ,(s-prefix "bbo:minValue"))
                (:process-type :string ,(s-prefix "bbo:processType"))
                (:type :string ,(s-prefix "bbo:type")))
  :on-path "things")

(define-resource activity (thing flowNode)
  :class (s-prefix "bbo:Activity")
  :properties `((:completion-quantity :integer ,(s-prefix "bbo:completionQuantity"))
                (:is-for-compensation :boolean ,(s-prefix "bbo:isForCompensation"))
                (:start-quantity :integer ,(s-prefix "bbo:startQuantity")))
  :has-many `((activity :via ,(s-prefix "bbo:dependsOn")
                        :as "dependent-activities")
              (boundaryEvent :via ,(s-prefix "bbo:has_boundaryEventRef")
                             :as "boundary-events")
              (inputOutputSpecification :via ,(s-prefix "bbo:has_ioSpecification")
                                        :as "io-specifications")
              (loopCharacteristics :via ,(s-prefix "bbo:has_loopCharacteristics")
                                   :as "loop-characteristics")
              (property :via ,(s-prefix "bbo:has_property")
                        :as "properties")
              (manufacturingFacility :via ,(s-prefix "bbo:takesPlaceAt")
                                     :as "manufacturing-facilities")
              (sequenceFlow :via ,(s-prefix "bbo:has_default")
                            :as "default-sequence-flows"))
  :resource-base (s-url "https://example.org/")
  :on-path "activities")

(define-resource adHocSubProcess (thing subProcess)
  :class (s-prefix "bbo:AdHocSubProcess")
  :has-many `((expression :via ,(s-prefix "bbo:has_completionCondition")
                          :as "completion-conditions"))
  :resource-base (s-url "https://example.org/")
  :on-path "ad-hoc-sub-processes")

(define-resource agent (thing)
  :class (s-prefix "bbo:Agent")
  :has-many `((activity :via ,(s-prefix "bbo:is_responsibleFor")
                        :as "responsible_activities")
              (process :via ,(s-prefix "bbo:is_responsibleFor")
                       :as "responsible_processes")
              (role :via ,(s-prefix "bbo:plays")
                    :as "roles"))
  :resource-base (s-url "https://example.org/")
  :on-path "agents")

(define-resource allMultiInstanceLoopCharacteristics (thing multiInstanceLoopCharacteristics)
  :class (s-prefix "bbo:AllMultiInstanceLoopCharacteristics")
  :resource-base (s-url "https://example.org/")
  :on-path "all-multi-instance-loop-characteristics")

(define-resource boundaryEvent (thing catchEvent)
  :class (s-prefix "bbo:BoundaryEvent")
  :has-many `((activity :via ,(s-prefix "bbo:is_attachedToRef")
                        :as "activities"))
  :resource-base (s-url "https://example.org/")
  :on-path "boundary-events")

(define-resource businessRuleTask (thing task)
  :class (s-prefix "bbo:BusinessRuleTask")
  :resource-base (s-url "https://example.org/")
  :on-path "business-rule-tasks")

(define-resource callableElement (thing rootElement)
  :class (s-prefix "bbo:CallableElement")
  :has-many `((callActivity :via ,(s-prefix "bbo:has_callActivity")
                            :as "call-activities")
              (inputOutputBinding :via ,(s-prefix "bbo:has_ioBinding")
                                  :as "io-bindings")
              (inputOutputSpecification :via ,(s-prefix "bbo:has_ioSpecification")
                                        :as "io-specifications")
              (interface :via ,(s-prefix "bbo:has_supportedInterfaceRefs")
                         :as "supported-interfaces"))
  :resource-base (s-url "https://example.org/")
  :on-path "callable-elements")

(define-resource callActivity (thing activity)
  :class (s-prefix "bbo:CallActivity")
  :has-many `((callableElement :via ,(s-prefix "bbo:has_calledElement")
                               :as "called-elements"))
  :resource-base (s-url "https://example.org/")
  :on-path "call-activities")

(define-resource cancelEvent (thing event)
  :class (s-prefix "bbo:CancelEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "cancel-events")

(define-resource cancelEventDefinition (thing eventDefinition)
  :class (s-prefix "bbo:CancelEventDefinition")
  :resource-base (s-url "https://example.org/")
  :on-path "cancel-event-definitions")

(define-resource catchEvent (thing event)
  :class (s-prefix "bbo:CatchEvent")
  :has-many `((dataResource :via ,(s-prefix "bbo:has_dataResourceOutput")
                            :as "data-resource-outputs"))
  :resource-base (s-url "https://example.org/")
  :on-path "catch-events")

(define-resource cell (thing manufacturingFacility)
  :class (s-prefix "bbo:Cell")
  :resource-base (s-url "https://example.org/")
  :on-path "cells")

(define-resource compensateEventDefinition (thing eventDefinition)
  :class (s-prefix "bbo:CompensateEventDefinition")
  :has-many `((activity :via ,(s-prefix "bbo:has_activityRef")
                        :as "activities"))
  :resource-base (s-url "https://example.org/")
  :on-path "compensate-event-definitions")

(define-resource compensationEvent (thing event)
  :class (s-prefix "bbo:CompensationEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "compensation-events")

(define-resource complexMultiInstanceLoopCharacteristics (thing multiInstanceLoopCharacteristics)
  :class (s-prefix "bbo:ComplexMultiInstanceLoopCharacteristics")
  :resource-base (s-url "https://example.org/")
  :on-path "complex-multi-instance-loop-characteristics")

(define-resource complexBehaviorDefinition (thing)
  :class (s-prefix "bbo:ComplexBehaviorDefinition")
  :has-many `((implicitThrowEvent :via ,(s-prefix "bbo:has_event")
                                  :as "implicit-throw-events")
              (multiInstanceLoopCharacteristics :via ,(s-prefix "bbo:has_multiInstanceLoopCharacteristics")
                                                :as "multi-instance-loop-characteristics")
              (expression :via ,(s-prefix "bbo:has_condition")
                          :as "conditions")
              (formalExpression :via ,(s-prefix "bbo:has_condition")
                                :as "formal-expressions"))
  :resource-base (s-url "https://example.org/")
  :on-path "complex-behavior-definitions")

(define-resource complexGateway (thing gateway)
  :class (s-prefix "bbo:ComplexGateway")
  :has-many `((expression :via ,(s-prefix "bbo:has_activationCondition")
                          :as "activation-conditions")
              (sequenceFlow :via ,(s-prefix "bbo:has_default")
                            :as "default-sequence-flows"))
  :resource-base (s-url "https://example.org/")
  :on-path "complex-gateways")

(define-resource component (thing materialResource)
  :class (s-prefix "bbo:Component")
  :resource-base (s-url "https://example.org/")
  :on-path "components")

(define-resource computer (thing materialResource)
  :class (s-prefix "bbo:Computer")
  :resource-base (s-url "https://example.org/")
  :on-path "computers")

(define-resource conditionalEvent (thing event)
  :class (s-prefix "bbo:ConditionalEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "conditional-events")

(define-resource conditionalSequenceFlow (thing sequenceFlow)
  :class (s-prefix "bbo:ConditionalSequenceFlow")
  :resource-base (s-url "https://example.org/")
  :on-path "conditional-sequence-flows")

(define-resource conditionalEventDefinition (thing eventDefinition)
  :class (s-prefix "bbo:ConditionalEventDefinition")
  :has-many `((expression :via ,(s-prefix "bbo:has_condition")
                          :as "conditions")
              (formalExpression :via ,(s-prefix "bbo:has_condition")
                                :as "formal-expressions"))
  :resource-base (s-url "https://example.org/")
  :on-path "conditional-event-definitions")

(define-resource conditionExpression (thing expression)
  :class (s-prefix "bbo:ConditionExpression")
  :has-many `((sequenceFlow :via ,(s-prefix "bbo:has_sequenceFlow")
                            :as "sequence-flows"))
  :resource-base (s-url "https://example.org/")
  :on-path "condition-expressions")

(define-resource consumableResource (thing resource)
  :class (s-prefix "bbo:ConsumableResource")
  :resource-base (s-url "https://example.org/")
  :on-path "consumable-resources")

(define-resource convergingGateway (thing gateway)
  :class (s-prefix "bbo:ConvergingGateway")
  :resource-base (s-url "https://example.org/")
  :on-path "converging-gateways")

(define-resource database (thing dataResource)
  :class (s-prefix "bbo:Database")
  :resource-base (s-url "https://example.org/")
  :on-path "databases")

(define-resource dataResource (thing resource)
  :class (s-prefix "bbo:DataResource")
  :resource-base (s-url "https://example.org/")
  :on-path "data-resources")

(define-resource defaultSequenceFlow (thing sequenceFlow)
  :class (s-prefix "bbo:DefaultSequenceFlow")
  :resource-base (s-url "https://example.org/")
  :on-path "default-sequence-flows")

(define-resource device (thing materialResource)
  :class (s-prefix "bbo:Device")
  :resource-base (s-url "https://example.org/")
  :on-path "devices")

(define-resource divergingGateway (thing gateway)
  :class (s-prefix "bbo:DivergingGateway")
  :resource-base (s-url "https://example.org/")
  :on-path "diverging-gateways")

(define-resource documentResource (thing dataResource)
  :class (s-prefix "bbo:DocumentResource")
  :resource-base (s-url "https://example.org/")
  :on-path "document-resources")

(define-resource endEvent (thing throwEvent)
  :class (s-prefix "bbo:EndEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "end-events")

(define-resource enterprise (thing manufacturingFacility)
  :class (s-prefix "bbo:Enterprise")
  :resource-base (s-url "https://example.org/")
  :on-path "enterprises")

(define-resource equipmentDraw (thing technicalDocument)
  :class (s-prefix "bbo:EquipmentDraw")
  :resource-base (s-url "https://example.org/")
  :on-path "equipment-draws")

(define-resource error (thing rootElement)
  :class (s-prefix "bbo:Error")
  :resource-base (s-url "https://example.org/")
  :on-path "errors")

(define-resource errorEvent (thing event)
  :class (s-prefix "bbo:ErrorEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "error-events")

(define-resource errorEventDefinition (thing eventDefinition)
  :class (s-prefix "bbo:ErrorEventDefinition")
  :has-many `((error :via ,(s-prefix "bbo:has_errorRef")
                     :as "errors"))
  :resource-base (s-url "https://example.org/")
  :on-path "error-event-definitions")

(define-resource escalation (thing rootElement)
  :class (s-prefix "bbo:Escalation")
  :resource-base (s-url "https://example.org/")
  :on-path "escalations")

(define-resource escalationEvent (thing event)
  :class (s-prefix "bbo:EscalationEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "escalation-events")

(define-resource escalationEventDefinition (thing eventDefinition)
  :class (s-prefix "bbo:EscalationEventDefinition")
  :has-many `((escalation :via ,(s-prefix "bbo:has_escalationRef")
                          :as "escalations"))
  :resource-base (s-url "https://example.org/")
  :on-path "escalation-event-definitions")

(define-resource event (thing flowNode)
  :class (s-prefix "bbo:Event")
  :has-many `((property :via ,(s-prefix "bbo:has_property")
                        :as "properties")
              (eventDefinition :via ,(s-prefix "bbo:has_eventDefinition")
                               :as "definitions"))
  :resource-base (s-url "https://example.org/")
  :on-path "events")

(define-resource eventSubProcess (thing subProcess)
  :class (s-prefix "bbo:EventSubProcess")
  :resource-base (s-url "https://example.org/")
  :on-path "event-sub-processes")

(define-resource eventBasedGateway (thing gateway)
  :class (s-prefix "bbo:EventBasedGateway")
  :resource-base (s-url "https://example.org/")
  :on-path "event-based-gateways")

(define-resource eventDefinition (thing rootElement)
  :class (s-prefix "bbo:EventDefinition")
  :has-many `((event :via ,(s-prefix "bbo:has_eventDefinitionEvent")
                     :as "events"))
  :resource-base (s-url "https://example.org/")
  :on-path "event-definitions")

(define-resource eventSubProcessStartEvent (thing subProcessStartEvent)
  :class (s-prefix "bbo:EventSubProcessStartEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "event-sub-process-start-events")

(define-resource exclusiveEventBasedGateway (thing eventBasedGateway)
  :class (s-prefix "bbo:ExclusiveEventBasedGateway")
  :resource-base (s-url "https://example.org/")
  :on-path "exclusive-event-based-gateways")

(define-resource exclusiveGateway (thing gateway)
  :class (s-prefix "bbo:ExclusiveGateway")
  :has-many `((sequenceFlow :via ,(s-prefix "bbo:has_default")
                            :as "default-sequence-flows"))
  :resource-base (s-url "https://example.org/")
  :on-path "exclusive-gateways")

(define-resource executableBusinessProcess (thing privateProcess)
  :class (s-prefix "bbo:ExecutablePrivateProcess")
  :resource-base (s-url "https://example.org/")
  :on-path "executable-business-processes")

(define-resource executableScript (thing documentResource)
  :class (s-prefix "bbo:ExecutableScript")
  :resource-base (s-url "https://example.org/")
  :on-path "executable-scripts")

(define-resource expression (thing)
  :class (s-prefix "bbo:Expression")
  :has-many `((complexGateway :via ,(s-prefix "bbo:has_complexGateway")
                              :as "complex-gateways"))
  :resource-base (s-url "https://example.org/")
  :on-path "expressions")

(define-resource factory (thing manufacturingFacility)
  :class (s-prefix "bbo:Factory")
  :resource-base (s-url "https://example.org/")
  :on-path "factories")

(define-resource flowElement (thing)
  :class (s-prefix "bbo:FlowElement")
  :has-many `((flowElementsContainer :via ,(s-prefix "bbo:has_container")
                                     :as "containers"))
  :resource-base (s-url "https://example.org/")
  :on-path "flow-elements")

(define-resource flowElementsContainer (thing)
  :class (s-prefix "bbo:FlowElementsContainer")
  :resource-base (s-url "https://example.org/")
  :on-path "flow-elements-containers")

(define-resource flowNode (thing flowElement)
  :class (s-prefix "bbo:FlowNode")
  :has-many `((flowNode :via ,(s-prefix "bbo:has_nextFlowNode")
                        :as "next-flow-nodes")
              (flowNode :via ,(s-prefix "bbo:has_previousFlowNode")
                        :as "previous-flow-nodes")
              (sequenceFlow :via ,(s-prefix "bbo:has_outgoing")
                            :as "outgoing-sequence-flows")
              (sequenceFlow :via ,(s-prefix "bbo:has_incoming")
                            :as "incoming-sequence-flows")
              (flowElement :via ,(s-prefix "bbo:has_flowElements")
                           :as "flow-elements")
              (sequenceFlow :via ,(s-prefix "bbo:has_sequenceFlow")
                            :as "sequence-flows"))
  :resource-base (s-url "https://example.org/")
  :on-path "flow-nodes")

(define-resource formalExpression (thing expression)
  :class (s-prefix "bbo:FormalExpression")
  :resource-base (s-url "https://example.org/")
  :on-path "formal-expressions")

(define-resource gateway (thing flowNode)
  :class (s-prefix "bbo:Gateway")
  :resource-base (s-url "https://example.org/")
  :on-path "gateways")

(define-resource globalBusinessRuleTask (thing globalTask)
  :class (s-prefix "bbo:GlobalBusinessRuleTask")
  :resource-base (s-url "https://example.org/")
  :on-path "global-business-rule-tasks")

(define-resource globalManualTask (thing globalTask)
  :class (s-prefix "bbo:GlobalManualTask")
  :resource-base (s-url "https://example.org/")
  :on-path "global-manual-tasks")

(define-resource globalScriptTask (thing globalTask)
  :class (s-prefix "bbo:GlobalScriptTask")
  :resource-base (s-url "https://example.org/")
  :on-path "global-script-tasks")

(define-resource globalTask (thing callableElement)
  :class (s-prefix "bbo:GlobalTask")
  :resource-base (s-url "https://example.org/")
  :on-path "global-tasks")

(define-resource globalUserTask (thing globalTask)
  :class (s-prefix "bbo:GlobalUserTask")
  :has-many `((rendering :via ,(s-prefix "bbo:has_rendering")
                         :as "renderings"))
  :resource-base (s-url "https://example.org/")
  :on-path "global-user-tasks")

(define-resource group (thing humanResource)
  :class (s-prefix "bbo:Group")
  :has-many `((person :via ,(s-prefix "bbo:groups")
                      :as "members")
              (person :via ,(s-prefix "bbo:has_leader")
                      :as "leaders"))
  :resource-base (s-url "https://example.org/")
  :on-path "groups")

(define-resource humanResource (thing agent resource)
  :class (s-prefix "bbo:HumanResource")
  :resource-base (s-url "https://example.org/")
  :on-path "human-resources")

(define-resource implicitThrowEvent (thing throwEvent)
  :class (s-prefix "bbo:ImplicitThrowEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "implicit-throw-events")

(define-resource inclusiveGateway (thing gateway)
  :class (s-prefix "bbo:InclusiveGateway")
  :has-many `((sequenceFlow :via ,(s-prefix "bbo:has_default")
                            :as "default-sequence-flows"))
  :resource-base (s-url "https://example.org/")
  :on-path "inclusive-gateways")

(define-resource inputOutputBinding (thing)
  :class (s-prefix "bbo:InputOutputBinding")
  :has-many `((resource :via ,(s-prefix "bbo:has_inputResourceRef")
                        :as "input-resources")
              (resource :via ,(s-prefix "bbo:has_outputResourceRef")
                        :as "output-resources")
              (callableElement :via ,(s-prefix "bbo:has_callableElement")
                               :as "callable-elements")
              (operation :via ,(s-prefix "bbo:has_operationRef")
                         :as "operations"))
  :resource-base (s-url "https://example.org/")
  :on-path "input-output-bindings")

(define-resource inputOutputSpecification (thing)
  :class (s-prefix "bbo:InputOutputSpecification")
  :has-many `((parameterValueBinding :via ,(s-prefix "bbo:has_parameterValueBindingInput")
                                     :as "parameter-value-binding-inputs")
              (parameterValueBinding :via ,(s-prefix "bbo:has_parameterValueBindingOutput")
                                     :as "parameter-value-binding-outputs")
              (resource :via ,(s-prefix "bbo:has_resourceInputs")
                        :as "resource-inputs")
              (resource :via ,(s-prefix "bbo:has_resourceOutputs")
                        :as "resource-outputs")
              (inputSet :via ,(s-prefix "bbo:has_inputSet")
                        :as "input-sets")
              (outputSet :via ,(s-prefix "bbo:has_outputSet")
                         :as "output-sets"))
  :resource-base (s-url "https://example.org/")
  :on-path "input-output-specifications")

(define-resource inputSet (thing)
  :class (s-prefix "bbo:InputSet")
  :has-many `((resource :via ,(s-prefix "bbo:has_resourceInputRef")
                        :as "resources")
              (inputOutputSpecification :via ,(s-prefix "bbo:has_ioSpecification")
                                        :as "io-specifications"))
  :resource-base (s-url "https://example.org/")
  :on-path "input-sets")

(define-resource interface (thing rootElement)
  :class (s-prefix "bbo:Interface")
  :has-many `((operation :via ,(s-prefix "bbo:has_interfaceOperation")
                         :as "operations")
              (callableElement :via ,(s-prefix "bbo:has_callableElement")
                               :as "callable-elements"))
  :resource-base (s-url "https://example.org/")
  :on-path "interfaces")

(define-resource intermediateCatchEvent (thing catchEvent)
  :class (s-prefix "bbo:IntermediateCatchEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "intermediate-catch-events")

(define-resource intermediateEvent (thing event)
  :class (s-prefix "bbo:IntermediateEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "intermediate-events")

(define-resource intermediateThrowEvent (thing throwEvent)
  :class (s-prefix "bbo:IntermediateThrowEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "intermediate-throw-events")

(define-resource interruptingBoundaryEvent (thing boundaryEvent)
  :class (s-prefix "bbo:InterruptingBoundaryEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "interrupting-boundary-events")

(define-resource interruptingEventSubProcessStartEvent (thing eventSubProcessStartEvent)
  :class (s-prefix "bbo:InterruptingEventSubProcessStartEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "interrupting-event-sub-process-start-events")

(define-resource job (thing)
  :class (s-prefix "bbo:Job")
  :has-many `((job :via ,(s-prefix "bbo:has_subordinatedJob")
                   :as "subordinated-jobs")
              (job :via ,(s-prefix "bbo:has_superiorJob")
                   :as "superior-jobs"))
  :resource-base (s-url "https://example.org/")
  :on-path "jobs")

(define-resource linkEvent (thing event)
  :class (s-prefix "bbo:LinkEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "link-events")

(define-resource linkEventDefinition (thing eventDefinition)
  :class (s-prefix "bbo:LinkEventDefinition")
  :has-many `((linkEventDefinition :via ,(s-prefix "bbo:has_source")
                                   :as "sources")
              (linkEventDefinition :via ,(s-prefix "bbo:has_target")
                                   :as "targets"))
  :resource-base (s-url "https://example.org/")
  :on-path "link-event-definitions")

(define-resource loopCharacteristics (thing)
  :class (s-prefix "bbo:LoopCharacteristics")
  :has-many `((activity :via ,(s-prefix "bbo:has_loopActivity")
                        :as "loop-activities"))
  :resource-base (s-url "https://example.org/")
  :on-path "loop-characteristics")

(define-resource manualTask (thing task)
  :class (s-prefix "bbo:ManualTask")
  :resource-base (s-url "https://example.org/")
  :on-path "manual-tasks")

(define-resource manufacturingFacility (thing)
  :class (s-prefix "bbo:ManufacturingFacility")
  :resource-base (s-url "https://example.org/")
  :on-path "manufacturing-facilities")

(define-resource materialResource (thing resource)
  :class (s-prefix "bbo:MaterialResource")
  :resource-base (s-url "https://example.org/")
  :on-path "material-resources")

(define-resource message (thing rootElement)
  :class (s-prefix "bbo:Message")
  :resource-base (s-url "https://example.org/")
  :on-path "messages")

(define-resource messageEventDefinition (thing eventDefinition)
  :class (s-prefix "bbo:MessageEventDefinition")
  :has-many `((message :via ,(s-prefix "bbo:has_messageRef")
                       :as "messages")
              (operation :via ,(s-prefix "bbo:has_operationRef")
                         :as "operations"))
  :resource-base (s-url "https://example.org/")
  :on-path "message-event-definitions")

(define-resource mixedGateway (thing gateway)
  :class (s-prefix "bbo:MixedGateway")
  :resource-base (s-url "https://example.org/")
  :on-path "mixed-gateways")

(define-resource multiInstanceLoopCharacteristics (thing loopCharacteristics)
  :class (s-prefix "bbo:MultiInstanceLoopCharacteristics")
  :has-many `((complexBehaviorDefinition :via ,(s-prefix "bbo:has_complexBehaviorDefinition")
                                         :as "complex-behavior-definitions")
              (resource :via ,(s-prefix "bbo:has_inputResourceItem")
                        :as "input-resources")
              (resource :via ,(s-prefix "bbo:has_outputResourceItem")
                        :as "output-resources")
              (expression :via ,(s-prefix "bbo:has_loopCardinality")
                          :as "cardinalities")
              (resourceCollection :via ,(s-prefix "bbo:has_loopResourceInputRef")
                                  :as "input-resource-collections")
              (resourceCollection :via ,(s-prefix "bbo:has_loopResourceOutputRef")
                                  :as "output-resource-collections")
              (expression :via ,(s-prefix "bbo:has_completionCondition")
                          :as "completion-conditions")
              (eventDefinition :via ,(s-prefix "bbo:has_noneBehaviorEventRef")
                               :as "none-behavior-events")
              (eventDefinition :via ,(s-prefix "bbo:has_oneBehaviorEventRef")
                               :as "one-behavior-events"))
  :resource-base (s-url "https://example.org/")
  :on-path "multi-instance-loop-characteristics")

(define-resource multipleEvent (thing event)
  :class (s-prefix "bbo:MultipleEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "multiple-events")

(define-resource nonEventSubProcessStartEvent (thing subProcessStartEvent)
  :class (s-prefix "bbo:NonEventSubProcessStartEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "non-event-sub-process-start-events")

(define-resource nonInterruptingBoundaryEvent (thing boundaryEvent)
  :class (s-prefix "bbo:NonInterruptingBoundaryEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "non-interrupting-boundary-events")

(define-resource nonInterruptingEventSubProcessStartEvent (thing eventSubProcessStartEvent)
  :class (s-prefix "bbo:NonInterruptingEventSubProcessStartEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "non-interrupting-event-sub-process-start-events")

(define-resource noneEvent (thing event)
  :class (s-prefix "bbo:NoneEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "none-events")

(define-resource noneMultiInstanceLoopCharacteristics (thing multiInstanceLoopCharacteristics)
  :class (s-prefix "bbo:NoneMultiInstanceLoopCharacteristics")
  :resource-base (s-url "https://example.org/")
  :on-path "none-multi-instance-loop-characteristics")

(define-resource nonExecutableBusinessProcess (thing privateProcess)
  :class (s-prefix "bbo:NonExecutableBusinessProcess")
  :resource-base (s-url "https://example.org/")
  :on-path "non-executable-business-processes")

(define-resource normalSequenceFlow (thing sequenceFlow)
  :class (s-prefix "bbo:NormalSequenceFlow")
  :resource-base (s-url "https://example.org/")
  :on-path "normal-sequence-flows")

(define-resource oneMultiInstanceLoopCharacteristics (thing multiInstanceLoopCharacteristics)
  :class (s-prefix "bbo:OneMultiInstanceLoopCharacteristics")
  :resource-base (s-url "https://example.org/")
  :on-path "one-multi-instance-loop-characteristics")

(define-resource operation (thing)
  :class (s-prefix "bbo:Operation")
  :has-many `((message :via ,(s-prefix "bbo:has_inMessageRef")
                       :as "in-messages")
              (message :via ,(s-prefix "bbo:has_outMessageRef")
                       :as "out-messages")
              (interfaces :via ,(s-prefix "bbo:has_operationInterface")
                          :as "interfaces")
              (error :via ,(s-prefix "bbo:has_errorRef")
                     :as "errors"))
  :resource-base (s-url "https://example.org/")
  :on-path "operations")

(define-resource outputSet (thing)
  :class (s-prefix "bbo:OutputSet")
  :has-many `((resource :via ,(s-prefix "bbo:has_resourceOutputRef")
                        :as "resources")
              (inputOutputSpecification :via ,(s-prefix "bbo:has_ioSpecification")
                                        :as "io-specifications"))
  :resource-base (s-url "https://example.org/")
  :on-path "output-sets")

(define-resource parallelEventBasedGateway (thing eventBasedGateway)
  :class (s-prefix "bbo:ParallelEventBasedGateway")
  :resource-base (s-url "https://example.org/")
  :on-path "parallel-event-based-gateways")

(define-resource parallelAdHocSubProcess (thing adHocSubProcess)
  :class (s-prefix "bbo:ParallelAdHocSubProcess")
  :resource-base (s-url "https://example.org/")
  :on-path "parallel-ad-hoc-sub-processes")

(define-resource parallelGateway (thing gateway)
  :class (s-prefix "bbo:ParallelGateway")
  :resource-base (s-url "https://example.org/")
  :on-path "parallel-gateways")

(define-resource parallelMultipleEvent (thing multipleEvent)
  :class (s-prefix "bbo:ParallelMultipleEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "parallel-multiple-events")

(define-resource parameter (thing)
  :class (s-prefix "bbo:Parameter")
  :resource-base (s-url "https://example.org/")
  :on-path "parameters")

(define-resource parameterExpectedValue (thing)
  :class (s-prefix "bbo:ParameterExpectedValue")
  :resource-base (s-url "https://example.org/")
  :on-path "parameter-expected-values")

(define-resource parameterValue (thing)
  :class (s-prefix "bbo:ParameterValue")
  :resource-base (s-url "https://example.org/")
  :on-path "parameter-values")

(define-resource parameterValueBinding (thing)
  :class (s-prefix "bbo:ParameterValueBinding")
  :has-many `((parameter :via ,(s-prefix "bbo:has_parameter")
                         :as "parameters")
              (parameterExpectedValue :via ,(s-prefix "bbo:has_parameterExpectedValue")
                                      :as "parameter-expected-values")
              (parameterValue :via ,(s-prefix "bbo:has_parameterValue")
                              :as "parameter-values"))
  :resource-base (s-url "https://example.org/")
  :on-path "parameter-value-bindings")

(define-resource person (thing humanResource)
  :class (s-prefix "bbo:Person")
  :has-many `((group :via ,(s-prefix "bbo:belongs")
                     :as "groups")
              (group :via ,(s-prefix "bbo:is_leaderOf")
                     :as "groups_as_leader")
              (job :via ,(s-prefix "bbo:has_job")
                   :as "jobs"))
  :resource-base (s-url "https://example.org/")
  :on-path "persons")

(define-resource privateProcess (thing process)
  :class (s-prefix "bbo:PrivateProcess")
  :resource-base (s-url "https://example.org/")
  :on-path "private-processes")

(define-resource process (thing callableElement flowElementsContainer)
  :class (s-prefix "bbo:Process")
  :has-many `((process :via ,(s-prefix "bbo:supports")
                       :as "supported-processes")
              (property :via ,(s-prefix "bbo:has_property")
                        :as "properties")
              (manufacturingFacility :via ,(s-prefix "bbo:takesPlaceAt")
                                     :as "manufacturing-facilities"))
  :resource-base (s-url "https://example.org/")
  :on-path "processes")

(define-resource processStartEvent (thing startEvent)
  :class (s-prefix "bbo:ProcessStartEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "process-start-events")

(define-resource property (thing)
  :class (s-prefix "bbo:Property")
  :has-many `((activity :via ,(s-prefix "bbo:has_propertyElement")
                        :as "activities")
              (event :via ,(s-prefix "bbo:has_propertyElement")
                        :as "events")
              (process :via ,(s-prefix "bbo:has_propertyElement")
                        :as "processes"))
  :resource-base (s-url "https://example.org/")
  :on-path "properties")

(define-resource publicProcess (thing process)
  :class (s-prefix "bbo:PublicProcess")
  :resource-base (s-url "https://example.org/")
  :on-path "public-processes")

(define-resource qualitativeParameter (thing parameter)
  :class (s-prefix "bbo:QualitativeParameter")
  :resource-base (s-url "https://example.org/")
  :on-path "qualitative-parameters")

(define-resource quantitativeParameter (thing parameter)
  :class (s-prefix "bbo:QuantitativeParameter")
  :has-many `((unitOfMeasure :via ,(s-prefix "bbo:has_unitOfMeasure")
                             :as "units-of-measure"))
  :resource-base (s-url "https://example.org/")
  :on-path "quantitative-parameters")

(define-resource receiveTask (thing task)
  :class (s-prefix "bbo:ReceiveTask")
  :has-many `((message :via ,(s-prefix "bbo:has_messageRef")
                       :as "messages")
              (operation :via ,(s-prefix "bbo:has_operationRef")
                         :as "operations"))
  :resource-base (s-url "https://example.org/")
  :on-path "receive-tasks")

(define-resource rendering (thing)
  :class (s-prefix "bbo:Rendering")
  :has-many `((globalUserTask :via ,(s-prefix "bbo:has_renderingTask")
                              :as "global-user-tasks")
              (userTask :via ,(s-prefix "bbo:has_renderingTask")
                        :as "user-tasks"))
  :resource-base (s-url "https://example.org/")
  :on-path "renderings")

(define-resource resource (thing rootElement)
  :class (s-prefix "bbo:Resource")
  :has-many `((resourceState :via ,(s-prefix "bbo:has_state")
                             :as "states")
              (resourceParameter :via ,(s-prefix "bbo:has_resourceParameters")
                                 :as "parameters"))
  :resource-base (s-url "https://example.org/")
  :on-path "resources")

(define-resource resourceCollection (thing)
  :class (s-prefix "bbo:ResourceCollection")
  :resource-base (s-url "https://example.org/")
  :on-path "resource-collections")

(define-resource resourceParameter (thing parameter)
  :class (s-prefix "bbo:ResourceParameter")
  :resource-base (s-url "https://example.org/")
  :on-path "resource-parameters")

(define-resource resourceState (thing)
  :class (s-prefix "bbo:ResourceState")
  :resource-base (s-url "https://example.org/")
  :on-path "resource-states")

(define-resource role (thing)
  :class (s-prefix "bbo:Role")
  :has-many `((activity :via ,(s-prefix "bbo:is_responsibleFor")
                        :as "responsible_activities")
              (process :via ,(s-prefix "bbo:is_responsibleFor")
                       :as "responsible_processes"))
  :resource-base (s-url "https://example.org/")
  :on-path "roles")

(define-resource rootElement (thing)
  :class (s-prefix "bbo:RootElement")
  :resource-base (s-url "https://example.org/")
  :on-path "root-elements")

(define-resource scheme (thing technicalDocument)
  :class (s-prefix "bbo:Scheme")
  :resource-base (s-url "https://example.org/")
  :on-path "schemes")

(define-resource scriptTask (thing task)
  :class (s-prefix "bbo:ScriptTask")
  :resource-base (s-url "https://example.org/")
  :on-path "script-tasks")

(define-resource sendTask (thing task)
  :class (s-prefix "bbo:SendTask")
  :has-many `((message :via ,(s-prefix "bbo:has_messageRef")
                       :as "messages")
              (operation :via ,(s-prefix "bbo:has_operationRef")
                         :as "operations"))
  :resource-base (s-url "https://example.org/")
  :on-path "send-tasks")

(define-resource sequenceFlow (thing flowElement)
  :class (s-prefix "bbo:SequenceFlow")
  :has-many `((activity :via ,(s-prefix "bbo:has_defaultElement")
                      :as "default-activities")
              (complexGateway :via ,(s-prefix "bbo:has_defaultElement")
                              :as "default-complex-gateways")
              (exclusiveGateway :via ,(s-prefix "bbo:has_defaultElement")
                                :as "default-exclusive-gateways")
              (inclusiveGateway :via ,(s-prefix "bbo:has_defaultElement")
                                :as "default-inclusive-gateways")
              (flowNode :via ,(s-prefix "bbo:has_sourceRef")
                        :as "sources")
              (flowNode :via ,(s-prefix "bbo:has_targetRef")
                        :as "targets")
              (expression :via ,(s-prefix "bbo:has_conditionExpression")
                          :as "condition-expressions")
              (exclusiveGateway :via ,(s-prefix "bbo:has_exclusiveGateway")
                                :as "exclusive-gateways")
              (inclusiveGateway :via ,(s-prefix "bbo:has_inclusiveGateway")
                                :as "inclusive-gateways"))
  :resource-base (s-url "https://example.org/")
  :on-path "sequence-flows")

(define-resource sequentialAdHocSubProcess (thing adHocSubProcess)
  :class (s-prefix "bbo:SequentialAdHocSubProcess")
  :resource-base (s-url "https://example.org/")
  :on-path "sequential-ad-hoc-sub-processes")

(define-resource serviceTask (thing task)
  :class (s-prefix "bbo:ServiceTask")
  :has-many `((operation :via ,(s-prefix "bbo:has_operationRef")
                         :as "operations"))
  :resource-base (s-url "https://example.org/")
  :on-path "service-tasks")

(define-resource shop (thing manufacturingFacility)
  :class (s-prefix "bbo:Shop")
  :resource-base (s-url "https://example.org/")
  :on-path "shops")

(define-resource signal (thing rootElement)
  :class (s-prefix "bbo:Signal")
  :resource-base (s-url "https://example.org/")
  :on-path "signals")

(define-resource signalEvent (thing event)
  :class (s-prefix "bbo:SignalEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "signal-events")

(define-resource signalEventDefinition (thing eventDefinition)
  :class (s-prefix "bbo:SignalEventDefinition")
  :has-many `((signal :via ,(s-prefix "bbo:has_signalRef")
                      :as "signals"))
  :resource-base (s-url "https://example.org/")
  :on-path "signal-event-definitions")

(define-resource softwareResource (thing agent resource)
  :class (s-prefix "bbo:SoftwareResource")
  :has-many `((computer :via ,(s-prefix "bbo:is_installedOn")
                        :as "installed-computers"))
  :resource-base (s-url "https://example.org/")
  :on-path "software-resources")

(define-resource sparePart (thing materialResource)
  :class (s-prefix "bbo:SparePart")
  :resource-base (s-url "https://example.org/")
  :on-path "spare-parts")

(define-resource standardLoopCharacteristics (thing loopCharacteristics)
  :class (s-prefix "bbo:StandardLoopCharacteristics")
  :has-many `((expression :via ,(s-prefix "bbo:has_loopCondition")
                          :as "loop-conditions"))
  :resource-base (s-url "https://example.org/")
  :on-path "standard-loop-characteristics")

(define-resource startEvent (thing catchEvent)
  :class (s-prefix "bbo:StartEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "start-events")

(define-resource station (thing manufacturingFacility)
  :class (s-prefix "bbo:Station")
  :resource-base (s-url "https://example.org/")
  :on-path "stations")

(define-resource subProcess (thing activity flowElementsContainer)
  :class (s-prefix "bbo:SubProcess")
  :resource-base (s-url "https://example.org/")
  :on-path "sub-processes")

(define-resource subProcessStartEvent (thing startEvent)
  :class (s-prefix "bbo:SubProcessStartEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "sub-process-start-events")

(define-resource task (thing activity)
  :class (s-prefix "bbo:Task")
  :resource-base (s-url "https://example.org/")
  :on-path "tasks")

(define-resource technicalDocument (thing documentResource)
  :class (s-prefix "bbo:TechnicalDocument")
  :resource-base (s-url "https://example.org/")
  :on-path "technical-documents")

(define-resource telecommand (thing dataResource)
  :class (s-prefix "bbo:Telecommand")
  :resource-base (s-url "https://example.org/")
  :on-path "telecommands")

(define-resource terminateEvent (thing event)
  :class (s-prefix "bbo:TerminateEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "terminate-events")

(define-resource terminateEventDefinition (thing eventDefinition)
  :class (s-prefix "bbo:TerminateEventDefinition")
  :resource-base (s-url "https://example.org/")
  :on-path "terminate-event-definitions")

(define-resource throwEvent (thing event)
  :class (s-prefix "bbo:ThrowEvent")
  :has-many `((dataResource :via ,(s-prefix "bbo:has_dataResourceInput")
                            :as "data-resource-inputs")
              (inputSet :via ,(s-prefix "bbo:has_inputSet")
                        :as "input-sets"))
  :resource-base (s-url "https://example.org/")
  :on-path "throw-events")

(define-resource timeExpression (thing expression)
  :class (s-prefix "bbo:TimeExpression")
  :resource-base (s-url "https://example.org/")
  :on-path "time-expressions")

(define-resource timerEvent (thing event)
  :class (s-prefix "bbo:TimerEvent")
  :resource-base (s-url "https://example.org/")
  :on-path "timer-events")

(define-resource timerEventDefinition (thing eventDefinition)
  :class (s-prefix "bbo:TimerEventDefinition")
  :has-many `((expression :via ,(s-prefix "bbo:has_timeCycle")
                          :as "time-cycles")
              (expression :via ,(s-prefix "bbo:has_timeDate")
                          :as "time-dates")
              (expression :via ,(s-prefix "bbo:has_timeDuration")
                          :as "time-durations"))
  :resource-base (s-url "https://example.org/")
  :on-path "timer-event-definitions")

(define-resource tool (thing materialResource)
  :class (s-prefix "bbo:Tool")
  :resource-base (s-url "https://example.org/")
  :on-path "tools")

(define-resource transaction (thing subProcess)
  :class (s-prefix "bbo:Transaction")
  :resource-base (s-url "https://example.org/")
  :on-path "transactions")

(define-resource underspecifiedExpression (thing expression)
  :class (s-prefix "bbo:UnderspecifiedExpression")
  :resource-base (s-url "https://example.org/")
  :on-path "underspecified-expressions")

(define-resource unitOfMeasure (thing)
  :class (s-prefix "bbo:UnitOfMeasure")
  :has-many `((oboUnit :via ,(s-prefix "bbo:has_unit")
                       :as "units")
               (oboPrefix :via ,(s-prefix "bbo:has_prefix")
                          :as "prefixes"))
  :resource-base (s-url "https://example.org/")
  :on-path "units-of-measure")

(define-resource unspecifiedGateway (thing gateway)
  :class (s-prefix "bbo:UnspecifiedGateway")
  :resource-base (s-url "https://example.org/")
  :on-path "unspecified-gateways")

(define-resource userGuide (thing technicalDocument)
  :class (s-prefix "bbo:UserManual")
  :resource-base (s-url "https://example.org/")
  :on-path "user-guides")

(define-resource userTask (thing task)
  :class (s-prefix "bbo:UserTask")
  :has-many `((rendering :via ,(s-prefix "bbo:has_rendering")
                         :as "renderings"))
  :resource-base (s-url "https://example.org/")
  :on-path "user-tasks")

(define-resource workProduct (thing resource)
  :class (s-prefix "bbo:WorkProduct")
  :has-many `((resource :via ,(s-prefix "bbo:is_composedOf")
                        :as "components"))
  :resource-base (s-url "https://example.org/")
  :on-path "work-products")

(define-resource workProcedureDocument (thing technicalDocument)
  :class (s-prefix "bbo:WorkProcedureDocument")
  :has-many `((activity :via ,(s-prefix "bbo:describes")
                        :as "described-activities")
              (process :via ,(s-prefix "bbo:describes")
                       :as "described-processes"))

  :resource-base (s-url "https://example.org/")
  :on-path "work-procedure-documents")

;; External

(define-resource oboUnit ()
  :class (s-prefix "obo:UO_0000000")
  :resource-base (s-url "https://example.org/")
  :on-path "obo-units")

(define-resource oboPrefix ()
  :class (s-prefix "obo:UO_0000046")
  :resource-base (s-url "https://example.org/")
  :on-path "obo-prefixes")